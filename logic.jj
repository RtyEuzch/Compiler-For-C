PARSER_BEGIN(CParser) 

public class CParser {
    public static void main(String[] args) {
        try {
            CParser instance = new CParser(System.in);
            instance.Start();
        } catch (Throwable e) {
            System.out.println("Syntax Error: \n");
            e.printStackTrace();
        }

    }
}

PARSER_END(CParser)

SKIP : {
    " " | "\n" | "\t" | "\r" |
    "/*": IN_COMMENT 
}

<IN_COMMENT> SKIP : {
    <~[]>
}

<IN_COMMENT> SKIP : {
    "*/": DEFAULT
}

TOKEN : {
    <IF: "if"> |
    <ELSE: "else"> | 
    <INT: "int"> | 
    <DIV: "/"> |
    <MUL: "*"> |
    <ADD: "+"> |
    <SUB: "-"> |
    <SEMICOLON: ";"> |
    <COMMA: ","> |
    <ASSIGN: "="> |
    <IDENTIFIER: (["a"-"z", "A"-"Z"])> |
    <NUMBER: (["0"-"9"])+>
}

void Start() : {} {
    (Statement())*
}

void Statement() : {} {
    Declaration() | 
    IfStatement() | 
    LOOKAHEAD(2) FunctionCall() | 
    LOOKAHEAD(2) Assignment()
}

void FunctionDef() : {} {
    <INT> <IDENTIFIER> "(" (Parameter() (LOOKAHEAD(1) <COMMA> Parameter())* )? ")" "{" (Statement())* "}"
}

void Parameter() : {} {
    <INT> <IDENTIFIER>
}

void FunctionCall() : {} {
    <IDENTIFIER> "(" ( Argument() (LOOKAHEAD(1) <COMMA> Argument())* )? ")" <SEMICOLON>
}

void Argument() : {} {
    Expression()
}

void IfStatement() : {} {
    <IF> "(" Expression() ")" Statement() (LOOKAHEAD(1) <ELSE> Statement())?
}

void Assignment() : {} {
    <IDENTIFIER> <ASSIGN> Expression() <SEMICOLON>
}

void Declaration() : {} {
    <INT> <IDENTIFIER> [<ASSIGN> Expression()] <SEMICOLON>
}

void Expression() : {} {
    Term() (<ADD> | <SUB> Term())*
}

void Term() : {} {
    Factor() (<MUL> | <DIV> Factor())* 
}

void Factor() : {} {
    <NUMBER> | <IDENTIFIER> | "(" Expression() ")"
}